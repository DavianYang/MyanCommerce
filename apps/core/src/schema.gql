# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type AddressDto {
  city: String
  company: String
  country: CountryDto!
  createdAt: DateTime!
  defaultBillingAddress: Boolean
  defaultShippingAddress: Boolean
  fullName: String
  id: ID!
  phoneNumber: String
  postalCode: String
  province: String
  streetLine1: String!
  streetLine2: String
  updatedAt: DateTime!
}

type AdministratorDto {
  createdAt: DateTime!
  emailAddress: String!
  firstName: String!
  id: ID!
  lastName: String!
  updatedAt: DateTime!
  user: UserDto!
}

type AuthUserResponse {
  id: ID!
  identifier: String!
  token: String!
}

union AuthenticationResult = AuthUserResponse | InvalidCredentialsError

type CountryDto {
  code: String!
  createdAt: DateTime!
  enabled: Boolean!
  id: ID!
  name: String!
  updatedAt: DateTime!
}

input CreateAddressInput {
  city: String
  company: String
  countryCode: String
  defaultBillingAddress: Boolean
  defaultShippingAddress: Boolean
  fullName: String
  phoneNumber: String
  postalCode: String
  province: String
  streetLine1: String!
  streetLine2: String
}

input CreateAdministratorInput {
  emailAddress: String!
  firstName: String!
  lastName: String!
  roleIds: [Int!]!
}

input CreateCountryInput {
  code: String!
  enabled: Boolean!
  name: String!
}

input CreateCustomerInput {
  emailAddress: String!
  firstName: String!
  lastName: String!
  phoneNumber: String
  title: String
}

union CreateCustomerResult = CustomerDto | EmailAddressConflictError

input CreateRoleInput {
  code: String!
  description: String!
}

type CustomerDto {
  addresses: [AddressDto!]!
  createdAt: DateTime!
  deletedAt: DateTime
  emailAddress: String!
  firstName: String!
  id: ID!
  lastName: String!
  phoneNumber: String
  title: String
  updatedAt: DateTime!
  user: UserDto!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type DeletionResponse {
  message: String
  result: DeletionResult!
}

enum DeletionResult {
  """The entity was successfully deleted"""
  DELETED

  """Deletion did not take place, reason given in message"""
  NOT_DELETED
}

"""
Returned when attempting to create a Customer with an email address already registered to an existing User.
"""
type EmailAddressConflictError {
  errorCode: String!
  message: String!
}

"""Returned if the user authentication credentials are not valid"""
type InvalidCredentialsError {
  authenticationError: String!
  errorCode: String!
  message: String!
}

type Mutation {
  """
  Create a new Address and associate it with the Customer specified by customerId
  """
  createAddress(customerId: String!, input: CreateAddressInput!): AddressDto!
  createAdministrator(input: CreateAdministratorInput!): AdministratorDto!
  createCountry(input: CreateCountryInput!): CountryDto!

  """
  Create a new Customer. If a password is provided, a new User will also be created an linked to the Customer.
  """
  createCustomer(input: CreateCustomerInput!): CreateCustomerResult!
  createRole(input: CreateRoleInput!): RoleDto!

  """Delete an existing Address with addressId"""
  deleteAddress(addressId: String!): Success!
  deleteCountry(id: String!): CountryDto!

  """Delete a Customer"""
  deleteCustomer(customerId: String!): DeletionResponse!
  deleteRole(id: Int!): RoleDto!
  login(identifier: String!): AuthenticationResult!
  loginSocial: AuthenticationResult!

  """Update an existing Address with addressId"""
  updateAddress(addressId: String!, input: UpdateAddressInput!): AddressDto!
  updateAdministrator: AdministratorDto!
  updateCountry(id: String!, input: UpdateCountryInput!): CountryDto!

  """Update an existing Customer"""
  updateCustomer(email: String!, input: UpdateCustomerInput!): UpdateCustomerResult!
  updateRole(id: Int!, input: UpdateRoleInput!): RoleDto!
}

type Query {
  administrator(id: String!): AdministratorDto!
  administrators(cursor: String, skip: Int, take: Int): [AdministratorDto!]!
  countries(cursor: String, skip: Int, take: Int): [CountryDto!]!
  country(id: String!): CountryDto!
  customer(id: String!): CustomerDto!
  customers(cursor: String, skip: Int, take: Int): [CustomerDto!]!
  me: UserDto!
  role(id: Int!): RoleDto!
  roles(cursor: String, skip: Int, take: Int): [RoleDto!]!
}

type RoleDto {
  code: String!
  description: String!
  id: ID!
}

type Success {
  success: Boolean!
}

input UpdateAddressInput {
  city: String
  company: String
  countryCode: String
  defaultBillingAddress: Boolean
  defaultShippingAddress: Boolean
  fullName: String
  phoneNumber: String
  postalCode: String
  province: String
  streetLine1: String
  streetLine2: String
}

input UpdateCountryInput {
  code: String
  enabled: Boolean
  name: String
}

input UpdateCustomerInput {
  emailAddress: String
  firstName: String
  lastName: String
  phoneNumber: String
  title: String
}

union UpdateCustomerResult = CustomerDto | EmailAddressConflictError

input UpdateRoleInput {
  code: String!
  description: String!
}

type UserDto {
  createdAt: DateTime!
  deletedAt: DateTime
  id: ID!
  identifier: String!
  lastLogin: DateTime
  roles: [RoleDto!]!
  updatedAt: DateTime!
  verified: Boolean!
}
